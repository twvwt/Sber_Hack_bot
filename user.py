import re
import asyncio
import os
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Tuple
from collections import defaultdict
from fastapi import FastAPI, Request
from fastapi.responses import HTMLResponse, JSONResponse
from fastapi.staticfiles import StaticFiles
from fastapi.templating import Jinja2Templates

from pyrogram import Client
from pyrogram.types import ChatPrivileges

from aiogram import Bot, Dispatcher, types, F, Router
from aiogram.filters import or_f, Command, CommandStart, StateFilter
from aiogram.types import (
    CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup,
    InputMediaPhoto, FSInputFile, Message, PollAnswer
)
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from apscheduler.schedulers.asyncio import AsyncIOScheduler


# –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –∫–ª–∞—Å—Å TaskStorage –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö
# class TaskStorage:
#     def __init__(self):
#         self.tasks: Dict[int, List[Dict]] = defaultdict(list)
#         self.events: Dict[int, Dict] = {}  # {chat_id: event_data}

# task_storage = TaskStorage()


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è FastAPI
app = FastAPI()
BASE_DIR = os.path.dirname(os.path.abspath(__file__))
app.mount("/static", StaticFiles(directory=os.path.join(BASE_DIR, "static")), name="static")
templates = Jinja2Templates(directory=os.path.join(BASE_DIR, "templates"))

router = Router()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
user_data: Dict[int, Dict] = {}
vote_results: Dict[int, Dict[str, Dict[str, List[str]]]] = defaultdict(
    lambda: {'location': defaultdict(list), 'products': defaultdict(list)}
)
discussion_data: Dict[int, Dict] = {}
organizers: Dict[int, int] = {}
proposal_messages: Dict[int, Dict[int, Tuple[int, str]]] = {}
saved_proposals: Dict[int, List[str]] = defaultdict(list)
original_messages: Dict[int, Dict[int, types.Message]] = {}

class TaskStorage:
    def __init__(self):
        self.tasks: Dict[int, List[Dict]] = defaultdict(list)

task_storage = TaskStorage()

class EventStates(StatesGroup):
    location = State()
    format = State()
    date = State()
    budget = State()
    guests = State()

# FastAPI endpoints
@app.get("/tasks/{chat_id}", response_class=HTMLResponse)
async def show_tasks(request: Request, chat_id: int):
    chat_id = int(chat_id)
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ task_storage
    products_votes = vote_results.get(chat_id, {}).get('products', {})
    
    tasks = []
    participants = set()
    
    for option, voters in products_votes.items():
        tasks.append({
            'name': option,
            'voters': voters
        })
        participants.update(voters)
    
    current_assignments = task_storage.tasks.get(chat_id, [])
    
    return templates.TemplateResponse("tasks.html", {
        "request": request,
        "chat_id": chat_id,
        "tasks": tasks,
        "participants": list(participants),
        "assignments": current_assignments
    })

@app.post("/assign_task/{chat_id}")
async def assign_task(chat_id: int, request: Request):
    try:
        data = await request.json()
        task = data.get("task")
        user_id = data.get("user_id")
        deadline = data.get("deadline")
        
        if not all([task, user_id, deadline]):
            return JSONResponse({"status": "error", "message": "Missing required fields"}, status_code=400)
        
        chat_id = int(chat_id)
        user_id = int(user_id)
        
        task_storage.tasks[chat_id].append({
            "task": task,
            "assigned_to": user_id,
            "deadline": deadline,
            "status": "pending"
        })
        return {"status": "success"}
    except Exception as e:
        return JSONResponse({"status": "error", "message": str(e)}, status_code=500)

@app.post("/complete_task/{chat_id}")
async def complete_task(chat_id: int, request: Request):
    try:
        data = await request.json()
        task = data.get("task")
        
        if not task:
            return JSONResponse({"status": "error", "message": "Task is required"}, status_code=400)
        
        chat_id = int(chat_id)
        
        for assignment in task_storage.tasks.get(chat_id, []):
            if assignment["task"] == task:
                assignment["status"] = "completed"
                break
        return {"status": "success"}
    except Exception as e:
        return JSONResponse({"status": "error", "message": str(e)}, status_code=500)

@app.post("/delete_task/{chat_id}")
async def delete_task(chat_id: int, request: Request):
    try:
        data = await request.json()
        task = data.get("task")
        
        if not task:
            return JSONResponse({"status": "error", "message": "Task is required"}, status_code=400)
        
        chat_id = int(chat_id)
        task_storage.tasks[chat_id] = [
            a for a in task_storage.tasks.get(chat_id, []) 
            if a["task"] != task
        ]
        return {"status": "success"}
    except Exception as e:
        return JSONResponse({"status": "error", "message": str(e)}, status_code=500)
# Telegram Bot Handlers
@router.message(CommandStart())
async def cmd_start(message: Message):
    await message.answer_photo(
        photo=FSInputFile('static/img/sber_logo.jpg'),
        caption="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π!",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="–°–æ–∑–¥–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ", callback_data="create_mp"),
                    InlineKeyboardButton(text="–ú–æ–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è", callback_data="my_mp")
                ]
            ]
        ))

@router.callback_query(F.data == 'create_mp')
async def process_create_mp(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    user_data[user_id] = {}
    
    buttons = {
        'location': "üìç –ú–µ—Å—Ç–æ",
        'format': "üé≠ –§–æ—Ä–º–∞—Ç", 
        'date': "üìÖ –î–∞—Ç–∞",
        'budget': "üí∞ –ë—é–¥–∂–µ—Ç",
        'guests': "üë• –ì–æ—Å—Ç–∏",
        'finish': "‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å"
    }
    
    await callback.message.edit_media(
        media=InputMediaPhoto(
            media=FSInputFile('static/img/sber_logo.jpg'),
            caption="–î–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ:"
        ),
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text=buttons['location'], callback_data="location"),
                    InlineKeyboardButton(text=buttons['format'], callback_data="format")
                ],
                [
                    InlineKeyboardButton(text=buttons['date'], callback_data="date"),
                    InlineKeyboardButton(text=buttons['budget'], callback_data="budget")
                ],
                [
                    InlineKeyboardButton(text=buttons['guests'], callback_data="guests")
                ],
                [
                    InlineKeyboardButton(text=buttons['finish'], callback_data="finish")
                ]
            ]
        )
    )
    await callback.answer()

@router.callback_query(F.data.in_(['location', 'format', 'date', 'budget', 'guests']))
async def process_event_data(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    data_type = callback.data
    
    state_mapping = {
        'location': EventStates.location,
        'format': EventStates.format,
        'date': EventStates.date,
        'budget': EventStates.budget,
        'guests': EventStates.guests
    }
    await state.set_state(state_mapping[data_type])
    
    questions = {
        'location': '–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥(–æ–±–ª–∞—Å—Ç—å), –≥–¥–µ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ –ø—Ä–æ–≤–µ—Å—Ç–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ:',
        'format': "–í–≤–µ–¥–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è (–ù–∞–ø—Ä–∏–º–µ—Ä: —Å–≤–∞–¥—å–±–∞, –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤, –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è):",
        'date': '–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –¥–ª—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è (–§–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì):',
        'budget': "–ö–∞–∫–æ–π –±—é–¥–∂–µ—Ç –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ? (–¢–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã, –º–∏–Ω. 10000)",
        'guests': "–°–∫–æ–ª—å–∫–æ –≥–æ—Å—Ç–µ–π –ø–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è?"
    }
    
    await callback.message.answer(questions[data_type])
    await callback.answer()

@router.message(StateFilter(EventStates.location))
async def process_location(message: Message, state: FSMContext):
    user_id = message.from_user.id
    user_data.setdefault(user_id, {})['location'] = message.text
    await send_updated_buttons(message, user_id)
    await state.clear()

@router.message(StateFilter(EventStates.format))
async def process_format(message: Message, state: FSMContext):
    user_id = message.from_user.id
    user_data.setdefault(user_id, {})['format'] = message.text
    await send_updated_buttons(message, user_id)
    await state.clear()

@router.message(StateFilter(EventStates.date))
async def process_date(message: Message, state: FSMContext):
    user_id = message.from_user.id
    date_str = message.text.strip()
    
    if not re.match(r'^\d{2}\.\d{2}\.\d{4}$', date_str):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì")
        return
    
    try:
        date_obj = datetime.strptime(date_str, '%d.%m.%Y')
        if date_obj < datetime.now():
            await message.answer("‚ùå –î–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –ø—Ä–æ—à–ª–æ–º. –í–≤–µ–¥–∏—Ç–µ –±—É–¥—É—â—É—é –¥–∞—Ç—É")
            return
        
        user_data.setdefault(user_id, {})['date'] = date_str
        await send_updated_buttons(message, user_id)
        await state.clear()
    except ValueError:
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –¥–Ω—è –∏ –º–µ—Å—è—Ü–∞")

@router.message(StateFilter(EventStates.budget))
async def process_budget(message: Message, state: FSMContext):
    user_id = message.from_user.id
    budget_str = message.text.strip()
    
    if not re.match(r'^\d+$', budget_str):
        await message.answer("‚ùå –ë—é–¥–∂–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º. –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –∏ —Å–∏–º–≤–æ–ª–æ–≤")
        return
    
    budget = int(budget_str)
    if budget < 10000:
        await message.answer("‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –±—é–¥–∂–µ—Ç - 10000 —Ä—É–±–ª–µ–π. –í–≤–µ–¥–∏—Ç–µ –±–æ–ª—å—à—É—é —Å—É–º–º—É")
        return
    
    user_data.setdefault(user_id, {})['budget'] = f"{budget} ‚ÇΩ"
    await send_updated_buttons(message, user_id)
    await state.clear()

@router.message(StateFilter(EventStates.guests))
async def process_guests(message: Message, state: FSMContext):
    user_id = message.from_user.id
    user_data.setdefault(user_id, {})['guests'] = message.text
    await send_updated_buttons(message, user_id)
    await state.clear()

async def send_updated_buttons(message: Message, user_id: int):
    event_data = user_data.get(user_id, {})
    buttons = {
        'location': f"üìç –ú–µ—Å—Ç–æ {'‚úÖ' if event_data.get('location') else ''}",
        'format': f"üé≠ –§–æ—Ä–º–∞—Ç {'‚úÖ' if event_data.get('format') else ''}",
        'date': f"üìÖ –î–∞—Ç–∞ {'‚úÖ' if event_data.get('date') else ''}",
        'budget': f"üí∞ –ë—é–¥–∂–µ—Ç {'‚úÖ' if event_data.get('budget') else ''}",
        'guests': f"üë• –ì–æ—Å—Ç–∏ {'‚úÖ' if event_data.get('guests') else ''}",
        'finish': "‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å"
    }
    
    await message.answer_photo(
        photo=FSInputFile('static/img/sber_logo.jpg'),
        caption="–î–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ:",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text=buttons['location'], callback_data="location"),
                    InlineKeyboardButton(text=buttons['format'], callback_data="format")
                ],
                [
                    InlineKeyboardButton(text=buttons['date'], callback_data="date"),
                    InlineKeyboardButton(text=buttons['budget'], callback_data="budget")
                ],
                [
                    InlineKeyboardButton(text=buttons['guests'], callback_data="guests")
                ],
                [
                    InlineKeyboardButton(text=buttons['finish'], callback_data="finish")
                ]
            ]
        )
    )




@router.callback_query(F.data == 'finish')
async def process_finish(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    event_data = user_data.get(user_id, {})
    if all(key in event_data for key in ['location', 'format', 'date', 'budget', 'guests']):
        summary = (
            "‚úÖ –î–∞–Ω–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:\n\n"
            f"üìç –ì–æ—Ä–æ–¥: {event_data['location']}\n"
            f"üé≠ –§–æ—Ä–º–∞—Ç: {event_data['format']}\n"
            f"üìÖ –î–∞—Ç–∞: {event_data['date']}\n"
            f"üí∞ –ë—é–¥–∂–µ—Ç: {event_data['budget']}\n"
            f"üë• –ì–æ—Å—Ç–∏: {event_data['guests']}"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await callback.message.answer(summary)
        await callback.answer("–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–æ!")
        
        # –°–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø—É –∏ –¥–æ–±–∞–≤–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Pyrogram –∫–ª–∏–µ–Ω—Ç (—É–∫–∞–∂–∏—Ç–µ —Å–≤–æ–∏ api_id –∏ api_hash)
            pyro_app = Client(
                "my_session",
                api_id = 24373411,
                api_hash = '195b8f73d79491b07e658b1ca6dae0c9'
            )
            
            async with pyro_app:
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–µ
                organizer = await pyro_app.get_users(user_id)
                organizer_id = callback.from_user.id
                # –°–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø—É —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ñ–æ—Ä–º–∞—Ç–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
                group_title = f"–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: {event_data['format']}"
                group_description = f"–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä: {organizer.first_name}\n–î–∞—Ç–∞: {event_data['date']}"
                
                group = await pyro_app.create_supergroup(
                    title=group_title,
                    description=group_description
                )
                # –ü–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
            # schedule_reminder(event_data, group.id, callback.bot)
                # –î–æ–±–∞–≤–ª—è–µ–º –±–æ—Ç–∞ –∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞ –≤ –≥—Ä—É–ø–ø—É
                await pyro_app.add_chat_members(
                    group.id,
                    ["win_hackaton_bot", organizer_id]  # –£–∫–∞–∂–∏—Ç–µ username –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
                )
                print(user_id)
                # –î–∞–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –±–æ—Ç—É
                await pyro_app.promote_chat_member(
                    chat_id=group.id,
                    user_id="win_hackaton_bot",  # –£–∫–∞–∂–∏—Ç–µ username –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
                    privileges=ChatPrivileges(
                        can_manage_chat=True,
                        can_promote_members=True,
                        can_delete_messages=True,
                        can_invite_users=True,
                        can_restrict_members=True,
                        can_pin_messages=True,
                        can_change_info=True
                    )
                )
                
                # –î–∞–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä—É
                await pyro_app.promote_chat_member(
                    chat_id=group.id,
                    user_id=user_id,
                    privileges=ChatPrivileges(
                        can_manage_chat=True,
                        can_promote_members=True,
                        can_delete_messages=True,
                        can_invite_users=True,
                        can_restrict_members=True,
                        can_pin_messages=True,
                        can_change_info=True
                    )
                )
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏ –≤ –≥—Ä—É–ø–ø—É
                group_message = (
                    "üéâ –ì—Ä—É–ø–ø–∞ –¥–ª—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è —Å–æ–∑–¥–∞–Ω–∞!\n\n"
                    f"üìå –û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä: {organizer.first_name} (@{organizer.username})\n"
                    f"üìç –ú–µ—Å—Ç–æ: {event_data['location']}\n"
                    f"üé≠ –§–æ—Ä–º–∞—Ç: {event_data['format']}\n"
                    f"üìÖ –î–∞—Ç–∞: {event_data['date']}\n"
                    f"üí∞ –ë—é–¥–∂–µ—Ç: {event_data['budget']}\n"
                    f"üë• –ì–æ—Å—Ç–µ–π: {event_data['guests']}\n\n"
                    "–î–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ–º –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞.\n–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ–±—É—Å—É–∂–¥–µ–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /mp_start"
                )
                
                await pyro_app.send_message(
                    chat_id=group.id,
                    text=group_message
                )
                # await pyro_app.send_message(
                #     chat_id=7218590203,
                #     text= f'"–ú–µ—Å—Ç–æ:{event_data['location']}\n–§–æ—Ä–º–∞—Ç:{event_data['format']}\n–î–∞—Ç–∞:{event_data['date']}–ë—é–¥–∂–µ—Ç:{event_data['budget']}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π:{event_data['guests']}–≠—Ç–æ –¥–∞–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ –º–Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª–∏ —Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏–∫–∏, —Å—Ñ–æ—Ä–º–∏—Ä—É–π —Ç–æ–ø-5 –º–µ—Å—Ç, —á—Ç–æ–±—ã —É–ª–æ–∂–∏—Ç—å—Å—è –≤ –±—é–¥–∂–µ—Ç.–°—Ñ–æ—Ä–º–∏—Ä—É–π JSON —Ñ–∞–π–ª–æ–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ: ["–º–µ—Å—Ç–æ": [{"—Å–ø–∏—Å–æ–∫ –≤–µ—â–µ–π –∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤:–∏—Ö —Å—Ç–æ–∏–º–æ—Å—Ç—å(–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:10)"},–∞–¥—Ä–µ—Å, –æ–ø–∏—Å–∞–Ω–∏–µ, –ø–æ–≥–æ–¥–∞].–ù–∞ —Ä—É—Å—Å–∫–æ–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON –±–µ–∑ –ª–∏—à–Ω–µ–≥–æ —Ç–µ–∫—Å—Ç–∞"'
                # )
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –≥—Ä—É–ø–ø—É –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä—É
                group_link = f"t.me/c/{group.id}/1"
                await callback.message.answer(
                    f"üéâ –ì—Ä—É–ø–ø–∞ –¥–ª—è –≤–∞—à–µ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è —Å–æ–∑–¥–∞–Ω–∞: {group_link}"
                )
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥—Ä—É–ø–ø—ã: {e}")
# # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
# def schedule_reminder(event_date: datetime, chat_id: int, bot: Bot):
#     reminder_time = event_date - timedelta(days=1)
#     if reminder_time < datetime.now():
#         return  # –ù–µ –ø–ª–∞–Ω–∏—Ä—É–µ–º, –µ—Å–ª–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —É–∂–µ —Å–∫–æ—Ä–æ
        
#     scheduler.add_job(
#         send_reminder,
#         'date',
#         run_date=reminder_time,
#         args=[chat_id, bot],
#         id=f"reminder_{chat_id}"
#     )

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
async def send_reminder(chat_id: int, bot: Bot):
        event = task_storage.events.get(chat_id)
        if not event:
            return
            
        event_date = event['date']
        days_left = (event_date - datetime.now()).days
        
        await bot.send_message(
            chat_id=chat_id,
            text=f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –¥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è '{event['title']}' –æ—Å—Ç–∞–ª—Å—è 1 –¥–µ–Ω—å!\n"
                 f"üìÖ –î–∞—Ç–∞: {event_date.strftime('%d.%m.%Y')}\n\n"
                 "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –≤—Å–µ—Ö –∑–∞–¥–∞—á!"
        )
@router.message(Command('mp_start'))
async def start_discussion(message: Message):
    chat_id = message.chat.id
    user_id = message.from_user.id
    
    if chat_id in organizers and organizers[chat_id] != user_id:
        await message.answer("‚ùå –¢–æ–ª—å–∫–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –∑–∞–ø—É—Å—Ç–∏—Ç—å –æ–±—Å—É–∂–¥–µ–Ω–∏–µ!")
        return
    
    if chat_id not in organizers:
        organizers[chat_id] = user_id
    
    await message.answer(
        "‚è± –£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è –∏ –≤—Ä–µ–º—è –æ–ø—Ä–æ—Å–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "<code>/time –º–∏–Ω—É—Ç—ã_–æ–±—Å—É–∂–¥–µ–Ω–∏—è –º–∏–Ω—É—Ç—ã_–æ–ø—Ä–æ—Å–∞</code>\n\n"
        "–ü—Ä–∏–º–µ—Ä: <code>/time 15 5</code>",
        parse_mode="HTML"
    )

@router.message(Command('time'))
async def set_discussion_times(message: Message, state: FSMContext):
    chat_id = message.chat.id
    user_id = message.from_user.id
    
    if chat_id not in organizers or organizers[chat_id] != user_id:
        await message.answer("‚ùå –¢–æ–ª—å–∫–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä –º–æ–∂–µ—Ç —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –≤—Ä–µ–º—è!")
        return
    
    try:
        args = message.text.split()
        discussion_time = int(args[1])
        voting_time = int(args[2])
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –≤ FSM
        await state.update_data(
            discussion_time=discussion_time,
            voting_time=voting_time
        )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –∏–∑–º–µ–Ω–∏—Ç—å
        await message.answer(
            f"‚è± –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤—Ä–µ–º—è:\n"
            f"–û–±—Å—É–∂–¥–µ–Ω–∏–µ: {discussion_time} –º–∏–Ω\n"
            f"–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ: {voting_time} –º–∏–Ω\n\n"
            "–í—Å–µ –≤–µ—Ä–Ω–æ?",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(text="‚úÖ –î–∞, –Ω–∞—á–∞—Ç—å", callback_data="confirm_time"),
                        InlineKeyboardButton(text="üîÑ –ò–∑–º–µ–Ω–∏—Ç—å", callback_data="change_time")
                    ]
                ]
            )
        )
        
    except (ValueError, IndexError):
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
            "<code>/time –º–∏–Ω—É—Ç—ã_–æ–±—Å—É–∂–¥–µ–Ω–∏—è –º–∏–Ω—É—Ç—ã_–æ–ø—Ä–æ—Å–∞</code>\n\n"
            "–ü—Ä–∏–º–µ—Ä: <code>/time 15 5</code>",
            parse_mode="HTML"
        )

@router.callback_query(F.data == "confirm_time")
async def confirm_time_handler(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    chat_id = callback.message.chat.id
    
    discussion_data[chat_id] = {
        'current_stage': None,
        'discussion_time': data['discussion_time'],
        'voting_time': data['voting_time'],
        'end_time': None,
        'stage': 1
    }
    
    await callback.message.edit_text("‚è± –í—Ä–µ–º—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ! –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Å—É–∂–¥–µ–Ω–∏–µ...")
    await start_stage(chat_id, 1, callback.bot)
    await state.clear()

@router.callback_query(F.data == "change_time")
async def change_time_handler(callback: CallbackQuery):
    await callback.message.edit_text(
        "‚è± –£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è –∏ –≤—Ä–µ–º—è –æ–ø—Ä–æ—Å–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "<code>/time –º–∏–Ω—É—Ç—ã_–æ–±—Å—É–∂–¥–µ–Ω–∏—è –º–∏–Ω—É—Ç—ã_–æ–ø—Ä–æ—Å–∞</code>\n\n"
        "–ü—Ä–∏–º–µ—Ä: <code>/time 15 5</code>",
        parse_mode="HTML"
    )
    await callback.answer()

async def start_stage(chat_id: int, stage_number: int, bot: Bot):
    if stage_number == 1:
        stage_name = "–í—ã–±–æ—Ä –º–µ—Å—Ç–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"
        stage_instructions = "–ü—Ä–µ–¥–ª–∞–≥–∞–π—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n!–ü–†–ï–î–õ–û–ñ–ï–ù–ò–ï –í–∞—à –≤–∞—Ä–∏–∞–Ω—Ç –º–µ—Å—Ç–∞"
        discussion_data[chat_id]['current_stage'] = 'location'
    else:
        stage_name = "–í—ã–±–æ—Ä –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏ —É—Å–ª—É–≥"
        stage_instructions = "–ü—Ä–µ–¥–ª–∞–≥–∞–π—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n!–ü–†–ï–î–õ–û–ñ–ï–ù–ò–ï –í–∞—à –≤–∞—Ä–∏–∞–Ω—Ç –ø—Ä–æ–¥—É–∫—Ç–∞/—É—Å–ª—É–≥–∏"
        discussion_data[chat_id]['current_stage'] = 'products'
    
    discussion_data[chat_id]['stage'] = stage_number
    saved_proposals[chat_id] = []
    
    await bot.send_message(
        chat_id=chat_id,
        text=f"üéâ –≠—Ç–∞–ø {stage_number}: {stage_name}\n\n{stage_instructions}"
    )
    
    discussion_time = discussion_data[chat_id]['discussion_time']
    end_time = datetime.now() + timedelta(minutes=discussion_time)
    discussion_data[chat_id]['end_time'] = end_time
    
    asyncio.create_task(discussion_timer(chat_id, stage_number, bot))

async def discussion_timer(chat_id: int, stage_number: int, bot: Bot):
    try:
        await asyncio.sleep(discussion_data[chat_id]['discussion_time'] * 60)
        await bot.send_message(chat_id, "‚è∞ –í—Ä–µ–º—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è –∑–∞–∫–æ–Ω—á–∏–ª–æ—Å—å! –°–æ–∑–¥–∞—é –æ–ø—Ä–æ—Å...")
        await create_polls(chat_id, stage_number, bot)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ discussion_timer: {e}")
        await bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–ø—Ä–æ—Å–∞: {e}")

@router.message(F.text.startswith('!–ü–†–ï–î–õ–û–ñ–ï–ù–ò–ï'))
async def handle_proposal(message: types.Message):
    chat_id = message.chat.id
    if chat_id not in discussion_data or not discussion_data[chat_id]['current_stage']:
        return
    
    proposal_text = message.text.replace('!–ü–†–ï–î–õ–û–ñ–ï–ù–ò–ï', '').strip()
    if not proposal_text:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ—Å–ª–µ !–ü–†–ï–î–õ–û–ñ–ï–ù–ò–ï")
        return
    
    if proposal_text not in saved_proposals[chat_id]:
        saved_proposals[chat_id].append(proposal_text)
        await message.reply(f"‚úÖ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ! –í—Å–µ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤: {len(saved_proposals[chat_id])}")
    else:
        await message.reply("‚ùå –≠—Ç–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —É–∂–µ –±—ã–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ —Ä–∞–Ω–µ–µ")

def create_voting_keyboard(stage_number: int, current_poll: int, total_polls: int):
    builder = InlineKeyboardBuilder()
    if current_poll == total_polls:
        builder.button(
            text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ", 
            callback_data=f"finish_voting_{stage_number}"
        )
    return builder.as_markup()

async def create_polls(chat_id: int, stage_number: int, bot: Bot):
    try:
        proposals = saved_proposals.get(chat_id, [])
        if not proposals:
            await bot.send_message(chat_id, "‚ùå –ù–∏ –æ–¥–Ω–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –Ω–µ –ø–æ—Å—Ç—É–ø–∏–ª–æ. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–æ—Ç —ç—Ç–∞–ø.")
            return

        chunks = [proposals[i:i + 10] for i in range(0, len(proposals), 10)]
        
        for i, chunk in enumerate(chunks, 1):
            question = f"üèÜ –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ {i}/{len(chunks)} –∑–∞ {'–º–µ—Å—Ç–æ' if stage_number == 1 else '–ø—Ä–æ–¥—É–∫—Ç—ã'}:"
            
            poll = await bot.send_poll(
                chat_id=chat_id,
                question=question,
                options=chunk,
                is_anonymous=False,
                allows_multiple_answers=(stage_number != 1),
                reply_markup=create_voting_keyboard(stage_number, i, len(chunks))
            )
            vote_results[chat_id][str(poll.poll.id)] = {
                'options': chunk,
                'question': question
            }
            
            await asyncio.sleep(1)

        saved_proposals.pop(chat_id, None)
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–ø—Ä–æ—Å–æ–≤: {e}")
        await bot.send_message(chat_id, f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –æ–ø—Ä–æ—Å—ã: {e}")

@router.poll_answer()
async def handle_poll_answer(poll_answer: PollAnswer, bot: Bot):
    try:
        user_id = poll_answer.user.id
        for chat_id, polls in vote_results.items():
            if poll_answer.poll_id in polls:
                poll_info = polls[poll_answer.poll_id]
                selected_options = [poll_info['options'][i] for i in poll_answer.option_ids]
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–æ–ª–æ—Å–∞ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                stage = discussion_data.get(chat_id, {}).get('current_stage')
                if stage in ['location', 'products']:
                    for option in selected_options:
                        vote_results[chat_id][stage][option].append(user_id)
                
                break
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–∞: {e}")

@router.callback_query(F.data.startswith("finish_voting_"))
async def finish_voting(callback: types.CallbackQuery, bot: Bot):
    chat_id = callback.message.chat.id
    stage_number = int(callback.data.split("_")[-1])
    
    if chat_id not in organizers or organizers[chat_id] != callback.from_user.id:
        await callback.answer("‚ùå –¢–æ–ª—å–∫–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –∑–∞–≤–µ—Ä—à–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ!", show_alert=True)
        return
    
    try:
        if stage_number == 1:
            await callback.message.answer("‚úÖ –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞ –º–µ—Å—Ç–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É...")
            await asyncio.sleep(5)
            await start_stage(chat_id, 2, bot)
        else:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –ø–µ—Ä–µ–¥ –æ—á–∏—Å—Ç–∫–æ–π
            voting_results = vote_results.get(chat_id, {}).get('products', {})
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
            tasks = []
            participants = set()
            
            for option, voters in voting_results.items():
                tasks.append(option)
                participants.update(voters)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ task_storage
            task_storage.tasks[chat_id] = []
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º URL
            web_url = f"http://127.0.0.1:8000/tasks/{chat_id}"
            
            await callback.message.answer(
                "üéâ –í—Å–µ —ç—Ç–∞–ø—ã –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω—ã!",
                reply_markup=InlineKeyboardMarkup(
                    inline_keyboard=[
                        [
                            InlineKeyboardButton(
                                text="üìã –†–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∑–∞–¥–∞—á–∏",
                                url=web_url
                            )
                        ]
                    ]
                )
            )
            
            # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            discussion_data.pop(chat_id, None)
            saved_proposals.pop(chat_id, None)
        
        await callback.answer()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è", show_alert=True)

async def run_bot():
    bot = Bot(token="7610916683:AAFFyrf6TAH7qL0kPvjUhmXlv4Zl6YdakcU")
    dp = Dispatcher()
    dp.include_router(router)
    await dp.start_polling(bot)

if __name__ == "__main__":
    import uvicorn
    from threading import Thread
    
    # –ó–∞–ø—É—Å–∫ FastAPI –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    Thread(target=lambda: uvicorn.run(app, host="0.0.0.0", port=8000)).start()
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    asyncio.run(run_bot())